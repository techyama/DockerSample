設計
・Dockerの基本概念に従い、基本的には1コンテナ=1プロセスの粒度で設計する。
・性能に影響を及ぼすため、永続的なデータは他のサービスに任せる(Dockerにステートを持たせない)
設計参考ページhttps://12factor.net/ja/


メリデメ(先輩インフラ屋さん提供)
・コンテナ
メリット
    コンテナを使って開発するとテスト済みのコンテナごと本番にデプロイできるのでインフラ構築にかかるコストがかなり安くなる。ただし個人配布しないで共有して開発する事。
    インフラ担当者にもコンテナにする事を伝えて置くこと。

デメリット
    コンテナ自体がサーバなので個人に配布してしまうと環境管理がややこしくなる(殺意が湧くくらい)
    これをやるなら環境を勝手に変更しないとか運用ルールを作らなきゃいけない(大抵守られない激しい殺意が湧く)

・ESXiとかの仮想基盤
メリット
    物理マシンに近い感覚で使える。
    UIめっちゃ簡単にいじれる。
    スナップショット撮ったりクローンしたり巻き戻しが簡単。

デメリット
    デプロイ作業は今まで通り
    錆れた技術なのでつまんない


セキュリティ
・rootユーザーを使わない
Docker Imageのデフォルトがrootユーザーなので、コンテナ内に侵入された場合を考慮しUSERコマンドで変更しておく

・ベースイメージは公式のものを使用
ユーザー製のイメージの中には悪意を持ったものも紛れており、マイニングや攻撃のリスクがあるので使わない

・ビルド時にパスワードや秘密鍵のような機微情報を与えない
パスワードや接続情報などは環境変数やVaultなどへ格納し、どうしても必要な場合は
--secretや--sshオプションでセキュアにビルドを行う

・ホストのファイルのマウントの仕方
最小限の権限とパスで範囲を狭くする
特にCIや監視などでdockerソケットのマウントを要求するソフトウェアが増えてきたので、ソケットをマウントする場合はRead-Onlyで行う

・.dockerignoreファイルを使う
dockerビルド時に無視するパスを記述するファイル。Docker版.gitignore。
.envのようなDBへの接続情報やSaaSのアクセスキーが記載されているファイル、または.gitやnode_modulesなどビルド時に不要なパスを記述し、ビルドの高速化とイメージの軽量化を行う
